@page "/"
@using System.Security.Claims
@using Reelr.Data
@using Reelr.Services
@inject MovieService MovieService
@inject AuthenticationStateProvider AuthProvider
@implements IDisposable
@inject NavigationManager Navigation

<div class="container-fluid px-3 px-md-4">
    <div class="row">
        <div class="col-12 mt-4">
            @* Search controls *@
            <div class="search-controls">
                <div class="row g-3 align-items-end">
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label">Title</label>
                        <input type="search" 
                               class="form-control" 
                               placeholder="Search movies..."
                               value="@_searchCriteria.SearchTerm"
                               @oninput="OnSearchTermChanged" />
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label">Release Year</label>
                        <input type="search" 
                               class="form-control" 
                               placeholder="e.g. 2022"
                               value="@_searchCriteria.ReleaseYear"
                               @oninput="OnReleaseYearChanged" />
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <label class="form-label">Sort By</label>
                        <select class="form-select"
                                value="@_searchCriteria.SortOption"
                                @onchange="OnSortOptionChanged">
                            <option value="">Sort order</option>
                            <option value="rating_asc">Rating Ascending</option>
                            <option value="rating_desc">Rating Descending</option>
                            <option value="name_asc">Name Ascending</option>
                            <option value="name_desc">Name Descending</option>
                        </select>
                    </div>
                    <div class="col-12 col-md-6 col-lg-3">
                        <button class="btn btn-outline-secondary" 
                                @onclick="ClearSearch" 
                                disabled="@_isProcessing">
                            Clear
                        </button>
                    </div>
                    <div class="col-12">
                        <label class="form-label">Genres</label>
                        <div class="row g-2">
                            @foreach (var genre in AvailableGenres)
                            {
                                <div class="col-6 col-sm-4 col-md-2">
                                    <div class="form-check">
                                        <input class="form-check-input" 
                                               type="checkbox" 
                                               id="@genre.ToLower()"
                                               checked="@_searchCriteria.SelectedGenres.Contains(genre)"
                                               @onchange="@(e => OnGenreToggled(genre, (bool)e.Value!))" />
                                        <label class="form-check-label" for="@genre.ToLower()">@genre</label>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @* Pagination *@
            @if (TotalPages > 1)
            {
                <div class="d-flex justify-content-center mt-3">
                    <nav aria-label="Movie pagination">
                        <ul class="pagination pagination-sm flex-wrap">
                            <li class="page-item @(_currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="PreviousPage" disabled="@(_currentPage == 1)">
                                    Previous
                                </button>
                            </li>
                            <li class="page-item active">
                                <span class="page-link">Page @_currentPage of @TotalPages</span>
                            </li>
                            <li class="page-item @(_currentPage == TotalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="NextPage" disabled="@(_currentPage == TotalPages)">
                                    Next
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            }

            @* Status message *@
            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
                    @_statusMessage
                </div>
            }

            @* Content area *@
            @if (_movies == null)
            {
                <div class="d-flex justify-content-center my-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!_movies.Any())
            {
                <div class="alert alert-warning mt-4" role="alert">
                    <h4 class="alert-heading">No movies found</h4>
                    <p>No movies match your criteria. Try adjusting your filters.</p>
                </div>
            }
            else
            {
                // Results
                <p class="mb-3">
                    <small class="text-muted">
                        Showing @GetResultsRangeText() of @_movies.Count movies
                    </small>
                </p>

                // Movie grid
                <div class="row g-3">
                    @foreach (var movie in PagedMovies)
                    {
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                            <div class="card movie-card h-100">
                                <img src="@GetPosterUrl(movie.PosterPath)"
                                     alt="@movie.Title poster" 
                                     class="card-img-top" />
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@movie.Title</h5>
                                    <p class="card-text">
                                        <small class="text-muted">(@movie.ReleaseYear)</small>
                                    </p>
                                    <p class="card-text text-truncate-3">@movie.Overview</p>
                                    <div class="mt-auto">
                                        <p class="card-text">
                                            <strong>Rating:</strong> @GetRatingText(movie.VoteAverageTmdb)
                                        </p>
                                        @if (!string.IsNullOrEmpty(movie.GenresString))
                                        {
                                            <p class="card-text">
                                                <small class="text-muted">Genres: @movie.GenresString</small>
                                            </p>
                                        }
                                        <p class="card-text">
                                            <small class="text-muted">TMDB: @movie.TmdbId</small>
                                        </p>
                                        
                                        @if (_userId != null)
                                        {
                                            <button class="btn @GetFavoriteButtonClass(movie.Id) btn-sm w-100"
                                                    @onclick="() => ToggleFavorite(movie.Id)" 
                                                    disabled="@_isProcessing">
                                                <i class="@GetFavoriteIconClass(movie.Id)"></i>
                                                @GetFavoriteButtonText(movie.Id)
                                            </button>
                                        }
                                        else
                                        {
                                            <p class="card-text text-center">
                                                <small class="text-muted">Please log in to add favorites</small>
                                            </p>
                                        }
                                        
                                        <button class="btn btn-sm btn-warning w-100 mt-2"
                                                @onclick="() => ViewDetails(movie.TmdbId)">
                                            Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Constants
    private const int PageSize = 12;
    private const int SearchDelayMs = 300;
    
    private static readonly string[] AvailableGenres =
    [
        "Action", "Adventure", "Animation", "Comedy", "Crime", "Drama", 
        "Family", "Fantasy", "Horror", "Romance", "Science Fiction", "Thriller"
    ];

    // State
    private List<Movie>? _allMovies;
    private List<Movie>? _movies;
    private HashSet<int> _userFavoriteIds = new();
    private string? _userId;
    private string _statusMessage = string.Empty;
    private bool _isProcessing;
    private int _currentPage = 1;
    
    // Timers
    private Timer? _messageTimer;
    private Timer? _searchTimer;
    
    // Search criteria
    private readonly SearchCriteria _searchCriteria = new();

    // Computed properties
    private int? TotalPages => (_movies?.Count + PageSize - 1) / PageSize;
    private List<Movie> PagedMovies => _movies?.Skip((_currentPage - 1) * PageSize).Take(PageSize).ToList() ?? new();

    protected override async Task OnInitializedAsync()
    {
        await InitializeUserAsync();
        await LoadMoviesAsync();

        if (_userId != null)
        {
            await LoadUserFavoritesAsync();
        }
    }

    // Initialization methods
    private async Task InitializeUserAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        _userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        
        var loginStatus = _userId != null ? $"User logged in: {_userId}" : "User not logged in";
        ShowTemporaryMessage(loginStatus);
    }

    private async Task LoadMoviesAsync()
    {
        try
        {
            _allMovies = await MovieService.GetMoviesAsync();
            _movies = _allMovies;
        }
        catch (Exception ex)
        {
            ShowTemporaryMessage($"Error loading movies: {ex.Message}");
        }
    }

    private async Task LoadUserFavoritesAsync()
    {
        if (_userId == null) return;

        try
        {
            var favorites = await MovieService.GetUserFavoritesAsync(_userId);
            _userFavoriteIds = favorites.Select(f => f.Id).ToHashSet();
            ShowTemporaryMessage($"User logged in: {_userId} | Favorites loaded: {_userFavoriteIds.Count}");
        }
        catch (Exception ex)
        {
            ShowTemporaryMessage($"Error loading favorites: {ex.Message}");
        }
    }

    // Event handlers
    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        _searchCriteria.SearchTerm = e.Value?.ToString();
        await DebounceSearch();
    }

    private async Task OnReleaseYearChanged(ChangeEventArgs e)
    {
        _searchCriteria.ReleaseYear = e.Value?.ToString();
        await DebounceSearch();
    }

    private async Task OnSortOptionChanged(ChangeEventArgs e)
    {
        _searchCriteria.SortOption = e.Value?.ToString();
        await SearchMovies();
    }

    private async Task OnGenreToggled(string genre, bool isSelected)
    {
        if (isSelected)
            _searchCriteria.SelectedGenres.Add(genre);
        else
            _searchCriteria.SelectedGenres.Remove(genre);
            
        await DebounceSearch();
    }

    // Search methods
    private Task DebounceSearch()
    {
        _searchTimer?.Dispose();
        _searchTimer = new Timer(async void (_) => await InvokeAsync(SearchMovies), null, SearchDelayMs, Timeout.Infinite);
        return Task.CompletedTask;
    }

    private async Task SearchMovies()
    {
        if (_allMovies == null) return;

        _isProcessing = true;
        StateHasChanged();
        
        try
        {
            await Task.Delay(10);

            _movies = _searchCriteria.IsEmpty ? _allMovies : FilterMovies(_allMovies);
            _movies = SortMovies(_movies);
            _currentPage = 1;
        }
        catch (Exception ex)
        {
            ShowTemporaryMessage($"Search error: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private List<Movie> FilterMovies(List<Movie> movies)
    {
        return movies.Where(m =>
            m.Title != null &&
            MatchesSearchTerm(m) &&
            MatchesReleaseYear(m) &&
            MatchesGenres(m)
        ).ToList();
    }

    private bool MatchesSearchTerm(Movie movie)
    {
        return string.IsNullOrWhiteSpace(_searchCriteria.SearchTerm) ||
               movie.Title!.Contains(_searchCriteria.SearchTerm, StringComparison.OrdinalIgnoreCase);
    }

    private bool MatchesReleaseYear(Movie movie)
    {
        return string.IsNullOrWhiteSpace(_searchCriteria.ReleaseYear) ||
               movie.ReleaseYear == _searchCriteria.ReleaseYear;
    }

    private bool MatchesGenres(Movie movie)
    {
        return !_searchCriteria.SelectedGenres.Any() ||
               _searchCriteria.SelectedGenres.All(g => 
                   movie.GenresString?.Contains(g, StringComparison.OrdinalIgnoreCase) == true);
    }

    private List<Movie> SortMovies(List<Movie> movies)
    {
        return _searchCriteria.SortOption switch
        {
            "rating_asc" => movies.OrderBy(m => m.VoteAverageTmdb ?? 0).ToList(),
            "rating_desc" => movies.OrderByDescending(m => m.VoteAverageTmdb ?? 0).ToList(),
            "name_asc" => movies.OrderBy(m => m.Title).ToList(),
            "name_desc" => movies.OrderByDescending(m => m.Title).ToList(),
            _ => movies
        };
    }

    private void ClearSearch()
    {
        _searchCriteria.Clear();
        _movies = _allMovies;
        _currentPage = 1;
        StateHasChanged();
    }

    // Favorites methods
    private bool IsFavorite(int movieId) => _userFavoriteIds.Contains(movieId);

    private async Task ToggleFavorite(int movieId)
    {
        if (_userId == null || _isProcessing) return;

        _isProcessing = true;
        try
        {
            var movie = _movies?.FirstOrDefault(m => m.Id == movieId);
            if (movie == null) return;

            if (IsFavorite(movieId))
            {
                await MovieService.RemoveFavoriteAsync(_userId, movieId);
                _userFavoriteIds.Remove(movieId);
                ShowTemporaryMessage($"Removed '{movie.Title}' from favorites");
            }
            else
            {
                await MovieService.AddFavoriteAsync(_userId, movieId);
                _userFavoriteIds.Add(movieId);
                ShowTemporaryMessage($"Added '{movie.Title}' to favorites");
            }
        }
        catch (Exception ex)
        {
            ShowTemporaryMessage($"Error: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
        }
    }

    // Pagination methods
    private void NextPage()
    {
        if (_currentPage < TotalPages)
        {
            _currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
        }
    }

    // Navigation methods
    private void ViewDetails(int movieId)
    {
        Navigation.NavigateTo($"/details/{movieId}");
    }

    // Helper methods
    private string GetResultsRangeText()
    {
        var start = (_currentPage - 1) * PageSize + 1;
        var end = Math.Min(_currentPage * PageSize, _movies?.Count ?? 0);
        return $"{start}-{end}";
    }

    private static string GetPosterUrl(string? posterPath)
    {
        return $"https://image.tmdb.org/t/p/w500/{posterPath}";
    }

    private static string GetRatingText(float? rating)
    {
        return rating?.ToString("0.0") ?? "N/A" + "/10";
    }

    private string GetFavoriteButtonClass(int movieId)
    {
        return IsFavorite(movieId) ? "btn-danger" : "btn-outline-primary";
    }

    private string GetFavoriteIconClass(int movieId)
    {
        return IsFavorite(movieId) ? "bi bi-heart-fill" : "bi bi-heart";
    }

    private string GetFavoriteButtonText(int movieId)
    {
        return IsFavorite(movieId) ? "Remove from Favorites" : "Add to Favorites";
    }

    // Utility methods
    private void ShowTemporaryMessage(string message)
    {
        _statusMessage = message;
        StateHasChanged();

        _messageTimer?.Dispose();
        _messageTimer = new Timer(async void (_) =>
        {
            await InvokeAsync(() =>
            {
                _statusMessage = string.Empty;
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(3), Timeout.InfiniteTimeSpan);
    }

    public void Dispose()
    {
        _messageTimer?.Dispose();
        _searchTimer?.Dispose();
    }

    // Helper Classes
    public class SearchCriteria
    {
        public string? SearchTerm { get; set; } = string.Empty;
        public string? ReleaseYear { get; set; } = string.Empty;
        public string? SortOption { get; set; } = string.Empty;
        public HashSet<string> SelectedGenres { get; set; } = new();

        public bool IsEmpty => string.IsNullOrWhiteSpace(SearchTerm) &&
                               string.IsNullOrWhiteSpace(ReleaseYear) &&
                               !SelectedGenres.Any();

        public void Clear()
        {
            SearchTerm = string.Empty;
            ReleaseYear = string.Empty;
            SortOption = string.Empty;
            SelectedGenres.Clear();
        }
    }
}