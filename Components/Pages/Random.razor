@page "/random"
@using Reelr.Data
@using Reelr.Services
@inject MovieService MovieService
@inject NavigationManager Navigation

<div class="container-fluid px-3 px-md-4">
    <div class="row">
        <div class="col-12 mt-4">
            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="alert alert-info alert-dismissible fade show mt-4" role="alert">
                    @_statusMessage
                </div>
            }

            @if (_isLoading)
            {
                <div class="d-flex justify-content-center my-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (_selectedMovie != null)
            {
                <div class="row">
                    @* Movie Poster *@
                    <div class="col-12 col-md-4 col-lg-3 mb-4">
                        <div class="position-relative">
                            <img src="@($"https://image.tmdb.org/t/p/w500/{_selectedMovie.PosterPath}")"
                                 alt="@_selectedMovie.Title poster"
                                 class="img-fluid rounded shadow"
                                 style="width: 100%; max-width: 300px;"/>
                        </div>
                    </div>

                    @* Movie Details *@
                    <div class="col-12 col-md-8 col-lg-9">
                        <div class="mb-3">
                            <h1 class="display-5 fw-bold">@_selectedMovie.Title</h1>
                            <p class="lead text-muted">(@_selectedMovie.ReleaseYear)</p>
                        </div>

                        @* Rating *@
                        <div class="mb-3">
                            <div class="d-flex align-items-center">
                                <span class="badge bg-warning text-dark fs-6 me-3">
                                    <i class="bi bi-star-fill me-1"></i>
                                    @(_selectedMovie.VoteAverageTmdb?.ToString("0.0") ?? "N/A")/10
                                </span>
                                <small class="text-muted">TMDB Rating</small>
                            </div>
                        </div>

                        @* Genres *@
                        @if (!string.IsNullOrEmpty(_selectedMovie.GenresString))
                        {
                            <div class="mb-3">
                                <h6 class="fw-bold">Genres</h6>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var genre in _selectedMovie.Genres ?? new List<string>())
                                    {
                                        <span class="badge bg-secondary">@genre</span>
                                    }
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(_selectedMovie.Overview))
                        {
                            <div class="mb-4">
                                <h6 class="fw-bold">Overview</h6>
                                <p class="text-muted">@_selectedMovie.Overview</p>
                            </div>
                        }

                        <div class="mb-4">
                            <small class="text-muted">
                                <i class="bi bi-info-circle me-1"></i>
                                Movie ID: @_selectedMovie.Id | TMDB ID: @_selectedMovie.TmdbId
                            </small>
                        </div>

                        @* Action Buttons *@
                        <div class="d-flex flex-wrap gap-3 mb-4">
                            <button class="btn btn-warning" @onclick="GetRandomMovie">
                                <i class="bi bi-shuffle me-1"></i>Pick Another
                            </button>

                            <button class="btn btn-outline-secondary" @onclick="GoBack">
                                <i class="bi bi-arrow-left me-2"></i>Back to Movies
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Movie>? _allMovies;
    private Movie? _selectedMovie;
    private bool _isLoading = true;
    private string _statusMessage = string.Empty;
    private Timer? _messageTimer;
    private readonly System.Random _random = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviesAsync();
        await GetRandomMovie();
        _isLoading = false;
    }

    private async Task LoadMoviesAsync()
    {
        try
        {
            _allMovies = await MovieService.GetMoviesAsync();
        }
        catch (Exception ex)
        {
            ShowTemporaryMessage($"Error loading movies: {ex.Message}");
        }
    }

    private async Task GetRandomMovie()
    {
        if (_allMovies == null || !_allMovies.Any())
        {
            ShowTemporaryMessage("No movies available for random selection.");
            return;
        }

        _isLoading = true;
        StateHasChanged();

        await Task.Delay(300);

        var index = _random.Next(_allMovies.Count);
        _selectedMovie = _allMovies[index];

        _isLoading = false;
        StateHasChanged();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void ShowTemporaryMessage(string message)
    {
        _statusMessage = message;
        StateHasChanged();

        _messageTimer?.Dispose();
        _messageTimer = new Timer(async void (_) =>
        {
            await InvokeAsync(() =>
            {
                _statusMessage = string.Empty;
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(3), Timeout.InfiniteTimeSpan);
    }
}